{
    "sourceFile": "src/convertToObject.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1709219991534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709219996684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use strict\";\n \n-const convertToObject = require('./convertToObject');\n+const convertToObject = require(\"./convertToObject\");\n const complexStylesString = require('./stylesString');\n \n describe('convertToObject should', () => {\n   it('convert an empty string to an empty object', () => {\n"
                },
                {
                    "date": 1709220003938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use strict\";\n \n-import convertToObject from \"./convertToObject\";\n-import complexStylesString from './stylesString';\n+const convertToObject = require(\"./convertToObject\");\n+const complexStylesString = require('./stylesString');\n \n describe('convertToObject should', () => {\n   it('convert an empty string to an empty object', () => {\n     expect(convertToObject('')).toEqual({});\n"
                }
            ],
            "date": 1709219991534,
            "name": "Commit-0",
            "content": "\"use strict\";\n\nconst convertToObject = require('./convertToObject');\nconst complexStylesString = require('./stylesString');\n\ndescribe('convertToObject should', () => {\n  it('convert an empty string to an empty object', () => {\n    expect(convertToObject('')).toEqual({});\n  });\n\n  it('convert a single rule to a single object property', () => {\n    expect(convertToObject('padding: 20px')).toEqual({ padding: '20px' });\n  });\n\n  it('convert a single rule with ; at the end', () => {\n    expect(convertToObject('position: absolute;')).toEqual({\n      position: 'absolute',\n    });\n  });\n\n  it('support values with spaces', () => {\n    expect(convertToObject('margin: 0 auto;')).toEqual({ margin: '0 auto' });\n  });\n\n  it('support properties with dashes', () => {\n    expect(convertToObject('font-size: 2rem;')).toEqual({\n      'font-size': '2rem',\n    });\n  });\n\n  it('ignore spaces around the rule', () => {\n    expect(convertToObject('    position: fixed;      ')).toEqual({\n      position: 'fixed',\n    });\n  });\n\n  it('ignore extra spaces around property names', () => {\n    expect(convertToObject('   color   : #00f;')).toEqual({ color: '#00f' });\n  });\n\n  it('ignore extra spaces around values', () => {\n    expect(\n      convertToObject('background-color:    rebeccapurple      ;'),\n    ).toEqual({ 'background-color': 'rebeccapurple' });\n  });\n\n  it('ignore tab characters', () => {\n    expect(\n      convertToObject(\n        '  \\t  \\t border-color   \\t  \\t :  \\t  \\t   yellowgreen  \\t ; \\t',\n      ),\n    ).toEqual({ 'border-color': 'yellowgreen' });\n  });\n\n  it('ignore line break characters', () => {\n    expect(\n      convertToObject(\n        '  \\n  \\n border   \\n  \\n :  \\n  \\n   3px solid green  \\n ; \\n',\n      ),\n    ).toEqual({ border: '3px solid green' });\n  });\n\n  it('keep extra spaces inside values', () => {\n    expect(convertToObject('margin: 0    auto;')).toEqual({\n      margin: '0    auto',\n    });\n  });\n\n  it('convert several rules written in 1 line', () => {\n    expect(convertToObject('display: block; margin: 10% auto;')).toEqual({\n      display: 'block',\n      margin: '10% auto',\n    });\n  });\n\n  it('ignore extra semicolons', () => {\n    expect(\n      convertToObject(';; ;display: flex; ; ; margin: 1rem; ; ; '),\n    ).toEqual({\n      display: 'flex',\n      margin: '1rem',\n    });\n  });\n\n  it('convert mutiline string', () => {\n    expect(\n      convertToObject(`\n      box-sizing: border-box;\n      padding: 0.5em 0.75em;\n    `),\n    ).toEqual({\n      'box-sizing': 'border-box',\n      padding: '0.5em 0.75em',\n    });\n  });\n\n  it('ignore empty lines', () => {\n    expect(\n      convertToObject(`\n\n\n      box-sizing: border-box;\n\n\n      width: 300px;\n\n      aspect-ration: 1;\n\n    `),\n    ).toEqual({\n      'box-sizing': 'border-box',\n      width: '300px',\n      'aspect-ration': '1',\n    });\n  });\n\n  it('support multiline values', () => {\n    expect(\n      convertToObject(`\n      box-shadow:\n          inset 0 -3em 3em rgb(0 200 0 / 30%),\n          0 0 0 2px white,\n          0.3em 0.3em 1em rgb(200 0 0 / 60%);\n    `),\n    ).toEqual({\n      'box-shadow': `inset 0 -3em 3em rgb(0 200 0 / 30%),\n          0 0 0 2px white,\n          0.3em 0.3em 1em rgb(200 0 0 / 60%)`,\n    });\n  });\n\n  it('convert a complex CSS rule', () => {\n    expect(convertToObject(complexStylesString)).toEqual({\n      'background-color': '#fff',\n      '-webkit-border-radius': '5px',\n      'border-radius': '5px',\n      border: '1px solid #e8e8e8',\n      '-webkit-box-sizing': 'border-box',\n      'box-sizing': 'border-box',\n      clear: 'both',\n      cursor: 'pointer',\n      float: 'left',\n      'font-family': 'inherit',\n      'font-size': '14px',\n      'font-weight': '400',\n      height: '42px',\n      'line-height': '40px',\n      outline: '0',\n      'padding-left': '18px',\n      'padding-right': '30px',\n      position: 'relative',\n      'text-align': 'left !important',\n      '-webkit-transition': 'all .2s ease-in-out',\n      transition: 'all .2s ease-in-out',\n      '-moz-user-select': 'none',\n      '-ms-user-select': 'none',\n      'user-select': 'none',\n      'white-space': 'nowrap',\n      width: 'auto',\n    });\n  });\n});\n"
        }
    ]
}